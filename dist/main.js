/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_muscleMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/muscleMap */ \"./src/scripts/muscleMap.js\");\n/* harmony import */ var _scripts_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/carousel */ \"./src/scripts/carousel.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // const instructionsContainer = document.querySelector('.instructions-container');\n\n  const storedExercises = [];\n  const carouselContainer = document.querySelector('.carousel-container');\n  const myCarousel = new _scripts_carousel__WEBPACK_IMPORTED_MODULE_1__[\"default\"](carouselContainer, storedExercises);\n  const bodyContainer = document.querySelector('.body-container');\n  new _scripts_muscleMap__WEBPACK_IMPORTED_MODULE_0__[\"default\"](bodyContainer, myCarousel);\n  document.querySelector('.main-title').addEventListener(\"click\", () => {\n    location.reload();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRDO0FBQ0Y7QUFFMUNFLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNoRDs7RUFFQSxNQUFNQyxlQUFlLEdBQUcsRUFBRTtFQUMxQixNQUFNQyxpQkFBaUIsR0FBR0gsUUFBUSxDQUFDSSxhQUFhLENBQUMscUJBQXFCLENBQUM7RUFDdkUsTUFBTUMsVUFBVSxHQUFHLElBQUlOLHlEQUFRLENBQUNJLGlCQUFpQixFQUFFRCxlQUFlLENBQUM7RUFFbkUsTUFBTUksYUFBYSxHQUFHTixRQUFRLENBQUNJLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztFQUMvRCxJQUFJTiwwREFBUyxDQUFDUSxhQUFhLEVBQUVELFVBQVUsQ0FBQztFQUV4Q0wsUUFBUSxDQUFDSSxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUNILGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNO0lBQ2xFTSxRQUFRLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0VBQ3JCLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215Zml0bmVzc2J1ZGR5Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE11c2NsZU1hcCBmcm9tICcuL3NjcmlwdHMvbXVzY2xlTWFwJztcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL3NjcmlwdHMvY2Fyb3VzZWwnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIC8vIGNvbnN0IGluc3RydWN0aW9uc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnN0cnVjdGlvbnMtY29udGFpbmVyJyk7XG5cbiAgICBjb25zdCBzdG9yZWRFeGVyY2lzZXMgPSBbXTtcbiAgICBjb25zdCBjYXJvdXNlbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1jb250YWluZXInKTtcbiAgICBjb25zdCBteUNhcm91c2VsID0gbmV3IENhcm91c2VsKGNhcm91c2VsQ29udGFpbmVyLCBzdG9yZWRFeGVyY2lzZXMpO1xuXG4gICAgY29uc3QgYm9keUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2R5LWNvbnRhaW5lcicpO1xuICAgIG5ldyBNdXNjbGVNYXAoYm9keUNvbnRhaW5lciwgbXlDYXJvdXNlbCk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi10aXRsZScpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0pXG59KTtcbiJdLCJuYW1lcyI6WyJNdXNjbGVNYXAiLCJDYXJvdXNlbCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0b3JlZEV4ZXJjaXNlcyIsImNhcm91c2VsQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsIm15Q2Fyb3VzZWwiLCJib2R5Q29udGFpbmVyIiwibG9jYXRpb24iLCJyZWxvYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/carousel.js":
/*!*********************************!*\
  !*** ./src/scripts/carousel.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _exercises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exercises */ \"./src/scripts/exercises.js\");\n\nclass Carousel {\n  constructor(containerEl, storedExercises) {\n    this.container = containerEl;\n    this.render();\n    this.storedExercises = storedExercises;\n  }\n  render() {\n    const carousel = document.createElement(\"div\");\n    carousel.classList.add(\"carousel\");\n    const carouselNav = document.createElement(\"div\");\n    carouselNav.classList.add(\"carousel-nav\");\n    this.carouselNav = carouselNav;\n    const carouselSlides = document.createElement(\"div\");\n    carouselSlides.classList.add(\"carousel-slides\");\n    this.carouselSlides = carouselSlides;\n    const exerciseTitle = document.createElement(\"div\");\n    exerciseTitle.classList.add(\"my-exercises\");\n    exerciseTitle.innerText = \"My Exercises\";\n    this.container.appendChild(carousel);\n    carousel.style.display = \"none\";\n    carousel.append(exerciseTitle, carouselNav, carouselSlides);\n  }\n  addExerciseToCarousel(exercise) {\n    const carouselItem = document.createElement(\"div\");\n    carouselItem.classList.add(\"carousel-item\");\n    carouselItem.id = `carousel-item-${document.querySelectorAll(\".carousel-item\").length + 1}`;\n    const carouselItemTitle = document.createElement('div');\n    carouselItemTitle.classList.add('carousel-item-title');\n    carouselItemTitle.innerText = exercise.name;\n    const carouselItemType = document.createElement('div');\n    carouselItemType.classList.add('carousel-item-type');\n    carouselItemType.innerText = exercise.type;\n    const closeButton = document.createElement(\"button\");\n    closeButton.classList.add(\"carousel-item-close-button\");\n    closeButton.innerText = \"X\";\n    if (this.carouselSlides.children.length === 4) {\n      return;\n    }\n    this.carouselSlides.appendChild(carouselItem);\n    carouselItem.append(carouselItemTitle, carouselItemType, closeButton);\n    if (this.carouselSlides.children.length === 1) {\n      this.container.querySelector(\".carousel\").style.display = \"block\";\n    }\n    carouselItem.scrollIntoView({\n      behavior: \"smooth\"\n    });\n    const numItems = document.querySelectorAll(\".carousel-item\").length;\n    const newNavItem = document.createElement(\"a\");\n    const navItems = Array.from(document.querySelectorAll('.carousel-nav a'));\n    navItems.forEach(navItem => navItem.classList.remove('active'));\n    newNavItem.classList.add('active');\n    newNavItem.href = `#carousel-item-${numItems}`;\n    newNavItem.textContent = numItems.toString();\n    this.carouselNav.appendChild(newNavItem);\n    newNavItem.addEventListener('click', event => {\n      debugger;\n      (0,_exercises__WEBPACK_IMPORTED_MODULE_0__.displayExerciseInfo)(exercise);\n      const navItems = Array.from(document.querySelectorAll('.carousel-nav a'));\n      navItems.forEach(navItem => navItem.classList.remove('active'));\n      event.target.classList.add('active');\n    });\n\n    // closeButton.addEventListener('click', () => {\n    //     const nextExercise = this.removeExerciseFromCarousel(carouselItem);\n    //     removeExerciseFromInfoContainer(nextExercise);\n\n    //     // Set the active class on the next navigation item (assuming you're showing the next item in the carousel)\n    //     // const nextNavItem = this.carouselNav.querySelector('a.active');\n    //     // if (nextNavItem) nextNavItem.classList.remove('active');\n    //     // const newActiveNavItem = this.carouselNav.querySelector(`a[href=\"#${carouselItem.nextElementSibling.id}\"]`);\n    //     // if (newActiveNavItem) newActiveNavItem.classList.add('active');\n    // });\n    // closeButton.addEventListener('click', () => {\n    //     // Determine the next active carousel item before removal\n    //     let nextActiveCarouselItem = carouselItem.nextElementSibling || carouselItem.previousElementSibling;\n\n    //     // Remove the current carousel item\n    //     const nextExercise = this.removeExerciseFromCarousel(carouselItem);\n    //     removeExerciseFromInfoContainer(nextExercise);\n\n    //     // Set the active class on the next navigation item\n    //     if (nextActiveCarouselItem) {\n    //         nextActiveCarouselItem.classList.add('active'); // Make sure you've logic elsewhere to remove active class from other carousel items\n    //         const nextActiveCarouselItemId = nextActiveCarouselItem.id.split(\"-\")[2];\n    //         const nextActiveNavItem = this.carouselNav.querySelector(`a[href=\"#carousel-item-${nextActiveCarouselItemId}\"]`);\n    //         if (nextActiveNavItem) {\n    //             nextActiveNavItem.classList.add('active');\n    //         }\n    //     }\n    // });\n\n    closeButton.addEventListener('click', () => {\n      // Determine the next active carousel item before removal\n      let nextActiveCarouselItem = carouselItem.nextElementSibling || carouselItem.previousElementSibling;\n\n      // Clear active class from all carousel items\n      const allCarouselItems = this.carouselSlides.querySelectorAll('.carousel-item');\n      allCarouselItems.forEach(item => item.classList.remove('active'));\n\n      // Clear active class from all navigation items\n      const allNavItems = this.carouselNav.querySelectorAll('a');\n      allNavItems.forEach(item => item.classList.remove('active'));\n\n      // Remove the current carousel item\n      const nextExercise = this.removeExerciseFromCarousel(carouselItem);\n      (0,_exercises__WEBPACK_IMPORTED_MODULE_0__.removeExerciseFromInfoContainer)(nextExercise);\n\n      // Set the active class on the next navigation item\n      if (nextActiveCarouselItem) {\n        nextActiveCarouselItem.classList.add('active');\n        const nextActiveCarouselItemId = nextActiveCarouselItem.id.split(\"-\")[2];\n        const nextActiveNavItem = this.carouselNav.querySelector(`a[href=\"#carousel-item-${nextActiveCarouselItemId}\"]`);\n        if (nextActiveNavItem) {\n          nextActiveNavItem.classList.add('active');\n        }\n      }\n    });\n    debugger;\n    this.storedExercises.push(exercise);\n  }\n  removeExerciseFromCarousel(carouselItem) {\n    const itemId = carouselItem.id.split(\"-\")[2];\n    const navItem = document.querySelector(`.carousel-nav a[href=\"#carousel-item-${itemId}\"]`);\n    this.carouselNav.removeChild(navItem);\n    this.carouselSlides.removeChild(carouselItem);\n\n    // Remove the exercise from the storedExercises array\n    const exerciseName = carouselItem.querySelector('.carousel-item-title').innerText;\n    const exerciseIndex = this.storedExercises.findIndex(exercise => exercise.name === exerciseName);\n    this.storedExercises.splice(exerciseIndex, 1);\n    if (this.carouselSlides.children.length === 0) {\n      this.container.querySelector(\".carousel\").style.display = \"none\"; // Hide the carousel when all exercises are removed\n    }\n    // Determine which exercise to return based on the current index\n    let nextExerciseIndex = exerciseIndex;\n    if (nextExerciseIndex >= this.storedExercises.length) {\n      nextExerciseIndex = this.storedExercises.length - 1; // If we've removed the last exercise, take the one before it\n    }\n\n    this.renumberCarouselItemsAndNavItems();\n    return this.storedExercises[nextExerciseIndex];\n  }\n  renumberCarouselItemsAndNavItems() {\n    const carouselItems = Array.from(this.carouselSlides.children);\n    const navItems = Array.from(this.carouselNav.querySelectorAll('a'));\n    carouselItems.forEach((item, index) => {\n      item.id = `carousel-item-${index + 1}`;\n      const navItem = navItems[index];\n      navItem.href = `#carousel-item-${index + 1}`;\n      navItem.textContent = (index + 1).toString();\n      navItem.classList.remove('active'); // Reset active class\n    });\n\n    const activeCarouselItem = this.carouselSlides.querySelector('.carousel-item.active');\n    if (activeCarouselItem) {\n      const activeItemId = activeCarouselItem.id.split(\"-\")[2];\n      const activeNavItem = this.carouselNav.querySelector(`a[href=\"#carousel-item-${activeItemId}\"]`);\n      if (activeNavItem) {\n        activeNavItem.classList.add('active');\n      }\n    }\n  }\n  updateStoredExercise(updatedExercise) {\n    // Find the index of the exercise that matches the name of updatedExercise\n    const index = this.storedExercises.findIndex(exercise => exercise.name === updatedExercise.name);\n    if (index !== -1) {\n      this.storedExercises[index] = updatedExercise;\n    }\n  }\n}\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Carousel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7TUFDNUNKLE9BQU8sQ0FBQy9CLFNBQVMsQ0FBQ2dDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFFO0lBQ3pDLENBQUMsQ0FBQzs7SUFFRixNQUFNNkIsa0JBQWtCLEdBQUcsSUFBSSxDQUFDMUQsY0FBYyxDQUFDbUIsYUFBYSxDQUFDLHVCQUF1QixDQUFDO0lBQ3JGLElBQUl1QyxrQkFBa0IsRUFBRTtNQUNwQixNQUFNQyxZQUFZLEdBQUdELGtCQUFrQixDQUFDaEQsRUFBRSxDQUFDbUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN4RCxNQUFNZSxhQUFhLEdBQUcsSUFBSSxDQUFDN0QsV0FBVyxDQUFDb0IsYUFBYSxDQUFFLDBCQUF5QndDLFlBQWEsSUFBRyxDQUFDO01BQ2hHLElBQUlDLGFBQWEsRUFBRTtRQUNmQSxhQUFhLENBQUMvRCxTQUFTLENBQUNDLEdBQUcsQ0FBQyxRQUFRLENBQUM7TUFDekM7SUFDSjtFQUNKO0VBR0ErRCxvQkFBb0JBLENBQUNDLGVBQWUsRUFBRTtJQUNsQztJQUNBLE1BQU1MLEtBQUssR0FBRyxJQUFJLENBQUNsRSxlQUFlLENBQUM2RCxTQUFTLENBQUM1QyxRQUFRLElBQUlBLFFBQVEsQ0FBQ00sSUFBSSxLQUFLZ0QsZUFBZSxDQUFDaEQsSUFBSSxDQUFDO0lBQ2hHLElBQUkyQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDZCxJQUFJLENBQUNsRSxlQUFlLENBQUNrRSxLQUFLLENBQUMsR0FBR0ssZUFBZTtJQUNqRDtFQUNKO0FBQ0o7QUFBQztBQUdELCtEQUFlMUUsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL215Zml0bmVzc2J1ZGR5Ly4vc3JjL3NjcmlwdHMvY2Fyb3VzZWwuanM/NjA2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXNwbGF5RXhlcmNpc2VJbmZvLCByZW1vdmVFeGVyY2lzZUZyb21JbmZvQ29udGFpbmVyIH0gZnJvbSBcIi4vZXhlcmNpc2VzXCI7XG5cbmNsYXNzIENhcm91c2VsIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXJFbCwgc3RvcmVkRXhlcmNpc2VzKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyRWw7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuc3RvcmVkRXhlcmNpc2VzID0gc3RvcmVkRXhlcmNpc2VzO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY2Fyb3VzZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjYXJvdXNlbC5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWxcIik7XG5cbiAgICAgICAgY29uc3QgY2Fyb3VzZWxOYXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjYXJvdXNlbE5hdi5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWwtbmF2XCIpO1xuICAgICAgICB0aGlzLmNhcm91c2VsTmF2ID0gY2Fyb3VzZWxOYXY7XG5cbiAgICAgICAgY29uc3QgY2Fyb3VzZWxTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjYXJvdXNlbFNsaWRlcy5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWwtc2xpZGVzXCIpO1xuICAgICAgICB0aGlzLmNhcm91c2VsU2xpZGVzID0gY2Fyb3VzZWxTbGlkZXM7XG5cbiAgICAgICAgY29uc3QgZXhlcmNpc2VUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGV4ZXJjaXNlVGl0bGUuY2xhc3NMaXN0LmFkZChcIm15LWV4ZXJjaXNlc1wiKTtcbiAgICAgICAgZXhlcmNpc2VUaXRsZS5pbm5lclRleHQgPSBcIk15IEV4ZXJjaXNlc1wiO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcm91c2VsKTtcbiAgICAgICAgY2Fyb3VzZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBjYXJvdXNlbC5hcHBlbmQoZXhlcmNpc2VUaXRsZSwgY2Fyb3VzZWxOYXYsIGNhcm91c2VsU2xpZGVzKTtcbiAgICB9XG5cbiAgICBhZGRFeGVyY2lzZVRvQ2Fyb3VzZWwoZXhlcmNpc2UpIHtcblxuICAgICAgICBjb25zdCBjYXJvdXNlbEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjYXJvdXNlbEl0ZW0uY2xhc3NMaXN0LmFkZChcImNhcm91c2VsLWl0ZW1cIik7XG4gICAgICAgIGNhcm91c2VsSXRlbS5pZCA9IGBjYXJvdXNlbC1pdGVtLSR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYXJvdXNlbC1pdGVtXCIpLmxlbmd0aCArIDF9YDtcblxuICAgICAgICBjb25zdCBjYXJvdXNlbEl0ZW1UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjYXJvdXNlbEl0ZW1UaXRsZS5jbGFzc0xpc3QuYWRkKCdjYXJvdXNlbC1pdGVtLXRpdGxlJyk7XG4gICAgICAgIGNhcm91c2VsSXRlbVRpdGxlLmlubmVyVGV4dCA9IGV4ZXJjaXNlLm5hbWU7XG5cbiAgICAgICAgY29uc3QgY2Fyb3VzZWxJdGVtVHlwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjYXJvdXNlbEl0ZW1UeXBlLmNsYXNzTGlzdC5hZGQoJ2Nhcm91c2VsLWl0ZW0tdHlwZScpO1xuICAgICAgICBjYXJvdXNlbEl0ZW1UeXBlLmlubmVyVGV4dCA9IGV4ZXJjaXNlLnR5cGU7XG5cbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBjbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWwtaXRlbS1jbG9zZS1idXR0b25cIik7XG4gICAgICAgIGNsb3NlQnV0dG9uLmlubmVyVGV4dCA9IFwiWFwiO1xuXG4gICAgICAgIGlmICh0aGlzLmNhcm91c2VsU2xpZGVzLmNoaWxkcmVuLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYXJvdXNlbFNsaWRlcy5hcHBlbmRDaGlsZChjYXJvdXNlbEl0ZW0pO1xuICAgICAgICBjYXJvdXNlbEl0ZW0uYXBwZW5kKGNhcm91c2VsSXRlbVRpdGxlLCBjYXJvdXNlbEl0ZW1UeXBlLCBjbG9zZUJ1dHRvbik7XG5cbiAgICAgICAgaWYgKHRoaXMuY2Fyb3VzZWxTbGlkZXMuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLmNhcm91c2VsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjYXJvdXNlbEl0ZW0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcblxuICAgICAgICBjb25zdCBudW1JdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2Fyb3VzZWwtaXRlbVwiKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5ld05hdkl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgY29uc3QgbmF2SXRlbXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXJvdXNlbC1uYXYgYScpKTtcbiAgICAgICAgbmF2SXRlbXMuZm9yRWFjaCgobmF2SXRlbSkgPT4gbmF2SXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG4gICAgICAgIG5ld05hdkl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAgICAgbmV3TmF2SXRlbS5ocmVmID0gYCNjYXJvdXNlbC1pdGVtLSR7bnVtSXRlbXN9YDtcbiAgICAgICAgbmV3TmF2SXRlbS50ZXh0Q29udGVudCA9IG51bUl0ZW1zLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuY2Fyb3VzZWxOYXYuYXBwZW5kQ2hpbGQobmV3TmF2SXRlbSk7XG5cbiAgICAgICAgbmV3TmF2SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIGRpc3BsYXlFeGVyY2lzZUluZm8oZXhlcmNpc2UpO1xuICAgICAgICAgICAgY29uc3QgbmF2SXRlbXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXJvdXNlbC1uYXYgYScpKTtcbiAgICAgICAgICAgIG5hdkl0ZW1zLmZvckVhY2goKG5hdkl0ZW0pID0+IG5hdkl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpO1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnN0IG5leHRFeGVyY2lzZSA9IHRoaXMucmVtb3ZlRXhlcmNpc2VGcm9tQ2Fyb3VzZWwoY2Fyb3VzZWxJdGVtKTtcbiAgICAgICAgLy8gICAgIHJlbW92ZUV4ZXJjaXNlRnJvbUluZm9Db250YWluZXIobmV4dEV4ZXJjaXNlKTtcblxuICAgICAgICAvLyAgICAgLy8gU2V0IHRoZSBhY3RpdmUgY2xhc3Mgb24gdGhlIG5leHQgbmF2aWdhdGlvbiBpdGVtIChhc3N1bWluZyB5b3UncmUgc2hvd2luZyB0aGUgbmV4dCBpdGVtIGluIHRoZSBjYXJvdXNlbClcbiAgICAgICAgLy8gICAgIC8vIGNvbnN0IG5leHROYXZJdGVtID0gdGhpcy5jYXJvdXNlbE5hdi5xdWVyeVNlbGVjdG9yKCdhLmFjdGl2ZScpO1xuICAgICAgICAvLyAgICAgLy8gaWYgKG5leHROYXZJdGVtKSBuZXh0TmF2SXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnN0IG5ld0FjdGl2ZU5hdkl0ZW0gPSB0aGlzLmNhcm91c2VsTmF2LnF1ZXJ5U2VsZWN0b3IoYGFbaHJlZj1cIiMke2Nhcm91c2VsSXRlbS5uZXh0RWxlbWVudFNpYmxpbmcuaWR9XCJdYCk7XG4gICAgICAgIC8vICAgICAvLyBpZiAobmV3QWN0aXZlTmF2SXRlbSkgbmV3QWN0aXZlTmF2SXRlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyAgICAgLy8gRGV0ZXJtaW5lIHRoZSBuZXh0IGFjdGl2ZSBjYXJvdXNlbCBpdGVtIGJlZm9yZSByZW1vdmFsXG4gICAgICAgIC8vICAgICBsZXQgbmV4dEFjdGl2ZUNhcm91c2VsSXRlbSA9IGNhcm91c2VsSXRlbS5uZXh0RWxlbWVudFNpYmxpbmcgfHwgY2Fyb3VzZWxJdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG5cbiAgICAgICAgLy8gICAgIC8vIFJlbW92ZSB0aGUgY3VycmVudCBjYXJvdXNlbCBpdGVtXG4gICAgICAgIC8vICAgICBjb25zdCBuZXh0RXhlcmNpc2UgPSB0aGlzLnJlbW92ZUV4ZXJjaXNlRnJvbUNhcm91c2VsKGNhcm91c2VsSXRlbSk7XG4gICAgICAgIC8vICAgICByZW1vdmVFeGVyY2lzZUZyb21JbmZvQ29udGFpbmVyKG5leHRFeGVyY2lzZSk7XG5cbiAgICAgICAgLy8gICAgIC8vIFNldCB0aGUgYWN0aXZlIGNsYXNzIG9uIHRoZSBuZXh0IG5hdmlnYXRpb24gaXRlbVxuICAgICAgICAvLyAgICAgaWYgKG5leHRBY3RpdmVDYXJvdXNlbEl0ZW0pIHtcbiAgICAgICAgLy8gICAgICAgICBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOyAvLyBNYWtlIHN1cmUgeW91J3ZlIGxvZ2ljIGVsc2V3aGVyZSB0byByZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gb3RoZXIgY2Fyb3VzZWwgaXRlbXNcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtSWQgPSBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtLmlkLnNwbGl0KFwiLVwiKVsyXTtcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBuZXh0QWN0aXZlTmF2SXRlbSA9IHRoaXMuY2Fyb3VzZWxOYXYucXVlcnlTZWxlY3RvcihgYVtocmVmPVwiI2Nhcm91c2VsLWl0ZW0tJHtuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtSWR9XCJdYCk7XG4gICAgICAgIC8vICAgICAgICAgaWYgKG5leHRBY3RpdmVOYXZJdGVtKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIG5leHRBY3RpdmVOYXZJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIG5leHQgYWN0aXZlIGNhcm91c2VsIGl0ZW0gYmVmb3JlIHJlbW92YWxcbiAgICAgICAgICAgIGxldCBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtID0gY2Fyb3VzZWxJdGVtLm5leHRFbGVtZW50U2libGluZyB8fCBjYXJvdXNlbEl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcblxuICAgICAgICAgICAgLy8gQ2xlYXIgYWN0aXZlIGNsYXNzIGZyb20gYWxsIGNhcm91c2VsIGl0ZW1zXG4gICAgICAgICAgICBjb25zdCBhbGxDYXJvdXNlbEl0ZW1zID0gdGhpcy5jYXJvdXNlbFNsaWRlcy5xdWVyeVNlbGVjdG9yQWxsKCcuY2Fyb3VzZWwtaXRlbScpO1xuICAgICAgICAgICAgYWxsQ2Fyb3VzZWxJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIGFjdGl2ZSBjbGFzcyBmcm9tIGFsbCBuYXZpZ2F0aW9uIGl0ZW1zXG4gICAgICAgICAgICBjb25zdCBhbGxOYXZJdGVtcyA9IHRoaXMuY2Fyb3VzZWxOYXYucXVlcnlTZWxlY3RvckFsbCgnYScpO1xuICAgICAgICAgICAgYWxsTmF2SXRlbXMuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGN1cnJlbnQgY2Fyb3VzZWwgaXRlbVxuICAgICAgICAgICAgY29uc3QgbmV4dEV4ZXJjaXNlID0gdGhpcy5yZW1vdmVFeGVyY2lzZUZyb21DYXJvdXNlbChjYXJvdXNlbEl0ZW0pO1xuICAgICAgICAgICAgcmVtb3ZlRXhlcmNpc2VGcm9tSW5mb0NvbnRhaW5lcihuZXh0RXhlcmNpc2UpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGFjdGl2ZSBjbGFzcyBvbiB0aGUgbmV4dCBuYXZpZ2F0aW9uIGl0ZW1cbiAgICAgICAgICAgIGlmIChuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtKSB7XG4gICAgICAgICAgICAgICAgbmV4dEFjdGl2ZUNhcm91c2VsSXRlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtSWQgPSBuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtLmlkLnNwbGl0KFwiLVwiKVsyXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0QWN0aXZlTmF2SXRlbSA9IHRoaXMuY2Fyb3VzZWxOYXYucXVlcnlTZWxlY3RvcihgYVtocmVmPVwiI2Nhcm91c2VsLWl0ZW0tJHtuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtSWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRBY3RpdmVOYXZJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRBY3RpdmVOYXZJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBkZWJ1Z2dlclxuICAgICAgICB0aGlzLnN0b3JlZEV4ZXJjaXNlcy5wdXNoKGV4ZXJjaXNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVFeGVyY2lzZUZyb21DYXJvdXNlbChjYXJvdXNlbEl0ZW0pIHtcblxuICAgICAgICBjb25zdCBpdGVtSWQgPSBjYXJvdXNlbEl0ZW0uaWQuc3BsaXQoXCItXCIpWzJdO1xuICAgICAgICBjb25zdCBuYXZJdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmNhcm91c2VsLW5hdiBhW2hyZWY9XCIjY2Fyb3VzZWwtaXRlbS0ke2l0ZW1JZH1cIl1gKTtcbiAgICAgICAgdGhpcy5jYXJvdXNlbE5hdi5yZW1vdmVDaGlsZChuYXZJdGVtKTtcbiAgICAgICAgdGhpcy5jYXJvdXNlbFNsaWRlcy5yZW1vdmVDaGlsZChjYXJvdXNlbEl0ZW0pO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZXhlcmNpc2UgZnJvbSB0aGUgc3RvcmVkRXhlcmNpc2VzIGFycmF5XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlTmFtZSA9IGNhcm91c2VsSXRlbS5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtaXRlbS10aXRsZScpLmlubmVyVGV4dDtcbiAgICAgICAgY29uc3QgZXhlcmNpc2VJbmRleCA9IHRoaXMuc3RvcmVkRXhlcmNpc2VzLmZpbmRJbmRleCgoZXhlcmNpc2UpID0+IGV4ZXJjaXNlLm5hbWUgPT09IGV4ZXJjaXNlTmFtZSk7XG4gICAgICAgIHRoaXMuc3RvcmVkRXhlcmNpc2VzLnNwbGljZShleGVyY2lzZUluZGV4LCAxKTtcblxuICAgICAgICBpZiAodGhpcy5jYXJvdXNlbFNsaWRlcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuY2Fyb3VzZWxcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyAgLy8gSGlkZSB0aGUgY2Fyb3VzZWwgd2hlbiBhbGwgZXhlcmNpc2VzIGFyZSByZW1vdmVkXG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGV4ZXJjaXNlIHRvIHJldHVybiBiYXNlZCBvbiB0aGUgY3VycmVudCBpbmRleFxuICAgICAgICBsZXQgbmV4dEV4ZXJjaXNlSW5kZXggPSBleGVyY2lzZUluZGV4O1xuICAgICAgICBpZiAobmV4dEV4ZXJjaXNlSW5kZXggPj0gdGhpcy5zdG9yZWRFeGVyY2lzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBuZXh0RXhlcmNpc2VJbmRleCA9IHRoaXMuc3RvcmVkRXhlcmNpc2VzLmxlbmd0aCAtIDE7ICAvLyBJZiB3ZSd2ZSByZW1vdmVkIHRoZSBsYXN0IGV4ZXJjaXNlLCB0YWtlIHRoZSBvbmUgYmVmb3JlIGl0XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbnVtYmVyQ2Fyb3VzZWxJdGVtc0FuZE5hdkl0ZW1zKCk7XG5cblxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZWRFeGVyY2lzZXNbbmV4dEV4ZXJjaXNlSW5kZXhdO1xuICAgIH1cblxuICAgIHJlbnVtYmVyQ2Fyb3VzZWxJdGVtc0FuZE5hdkl0ZW1zKCkge1xuICAgICAgICBjb25zdCBjYXJvdXNlbEl0ZW1zID0gQXJyYXkuZnJvbSh0aGlzLmNhcm91c2VsU2xpZGVzLmNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgbmF2SXRlbXMgPSBBcnJheS5mcm9tKHRoaXMuY2Fyb3VzZWxOYXYucXVlcnlTZWxlY3RvckFsbCgnYScpKTtcblxuICAgICAgICBjYXJvdXNlbEl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpdGVtLmlkID0gYGNhcm91c2VsLWl0ZW0tJHtpbmRleCArIDF9YDtcbiAgICAgICAgICAgIGNvbnN0IG5hdkl0ZW0gPSBuYXZJdGVtc1tpbmRleF07XG4gICAgICAgICAgICBuYXZJdGVtLmhyZWYgPSBgI2Nhcm91c2VsLWl0ZW0tJHtpbmRleCArIDF9YDtcbiAgICAgICAgICAgIG5hdkl0ZW0udGV4dENvbnRlbnQgPSAoaW5kZXggKyAxKS50b1N0cmluZygpO1xuICAgICAgICAgICAgbmF2SXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTsgIC8vIFJlc2V0IGFjdGl2ZSBjbGFzc1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhY3RpdmVDYXJvdXNlbEl0ZW0gPSB0aGlzLmNhcm91c2VsU2xpZGVzLnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1pdGVtLmFjdGl2ZScpO1xuICAgICAgICBpZiAoYWN0aXZlQ2Fyb3VzZWxJdGVtKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVJdGVtSWQgPSBhY3RpdmVDYXJvdXNlbEl0ZW0uaWQuc3BsaXQoXCItXCIpWzJdO1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlTmF2SXRlbSA9IHRoaXMuY2Fyb3VzZWxOYXYucXVlcnlTZWxlY3RvcihgYVtocmVmPVwiI2Nhcm91c2VsLWl0ZW0tJHthY3RpdmVJdGVtSWR9XCJdYCk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlTmF2SXRlbSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZU5hdkl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHVwZGF0ZVN0b3JlZEV4ZXJjaXNlKHVwZGF0ZWRFeGVyY2lzZSkge1xuICAgICAgICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgZXhlcmNpc2UgdGhhdCBtYXRjaGVzIHRoZSBuYW1lIG9mIHVwZGF0ZWRFeGVyY2lzZVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RvcmVkRXhlcmNpc2VzLmZpbmRJbmRleChleGVyY2lzZSA9PiBleGVyY2lzZS5uYW1lID09PSB1cGRhdGVkRXhlcmNpc2UubmFtZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVkRXhlcmNpc2VzW2luZGV4XSA9IHVwZGF0ZWRFeGVyY2lzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWw7XG4iXSwibmFtZXMiOlsiZGlzcGxheUV4ZXJjaXNlSW5mbyIsInJlbW92ZUV4ZXJjaXNlRnJvbUluZm9Db250YWluZXIiLCJDYXJvdXNlbCIsImNvbnN0cnVjdG9yIiwiY29udGFpbmVyRWwiLCJzdG9yZWRFeGVyY2lzZXMiLCJjb250YWluZXIiLCJyZW5kZXIiLCJjYXJvdXNlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImNhcm91c2VsTmF2IiwiY2Fyb3VzZWxTbGlkZXMiLCJleGVyY2lzZVRpdGxlIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmQiLCJhZGRFeGVyY2lzZVRvQ2Fyb3VzZWwiLCJleGVyY2lzZSIsImNhcm91c2VsSXRlbSIsImlkIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImNhcm91c2VsSXRlbVRpdGxlIiwibmFtZSIsImNhcm91c2VsSXRlbVR5cGUiLCJ0eXBlIiwiY2xvc2VCdXR0b24iLCJjaGlsZHJlbiIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwibnVtSXRlbXMiLCJuZXdOYXZJdGVtIiwibmF2SXRlbXMiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwibmF2SXRlbSIsInJlbW92ZSIsImhyZWYiLCJ0ZXh0Q29udGVudCIsInRvU3RyaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwibmV4dEFjdGl2ZUNhcm91c2VsSXRlbSIsIm5leHRFbGVtZW50U2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJhbGxDYXJvdXNlbEl0ZW1zIiwiaXRlbSIsImFsbE5hdkl0ZW1zIiwibmV4dEV4ZXJjaXNlIiwicmVtb3ZlRXhlcmNpc2VGcm9tQ2Fyb3VzZWwiLCJuZXh0QWN0aXZlQ2Fyb3VzZWxJdGVtSWQiLCJzcGxpdCIsIm5leHRBY3RpdmVOYXZJdGVtIiwicHVzaCIsIml0ZW1JZCIsInJlbW92ZUNoaWxkIiwiZXhlcmNpc2VOYW1lIiwiZXhlcmNpc2VJbmRleCIsImZpbmRJbmRleCIsInNwbGljZSIsIm5leHRFeGVyY2lzZUluZGV4IiwicmVudW1iZXJDYXJvdXNlbEl0ZW1zQW5kTmF2SXRlbXMiLCJjYXJvdXNlbEl0ZW1zIiwiaW5kZXgiLCJhY3RpdmVDYXJvdXNlbEl0ZW0iLCJhY3RpdmVJdGVtSWQiLCJhY3RpdmVOYXZJdGVtIiwidXBkYXRlU3RvcmVkRXhlcmNpc2UiLCJ1cGRhdGVkRXhlcmNpc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/carousel.js\n");

/***/ }),

/***/ "./src/scripts/data.js":
/*!*****************************!*\
  !*** ./src/scripts/data.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bicepExercises\": function() { return /* binding */ bicepExercises; },\n/* harmony export */   \"chestExercises\": function() { return /* binding */ chestExercises; },\n/* harmony export */   \"shoulderExercises\": function() { return /* binding */ shoulderExercises; },\n/* harmony export */   \"tricepExercises\": function() { return /* binding */ tricepExercises; }\n/* harmony export */ });\nconst shoulderExercises = [{\n  type: 'SHOULDERS',\n  name: 'Seated Dumbbell Press',\n  gifName: \"dumbbell seated shoulder press\",\n  primaryMuscles: ['Anterior Deltoids'],\n  secondaryMuscles: ['Lateral Deltoids', 'Triceps'],\n  steps: [\"Sit on a bench with back support. Raise the dumbbells to shoulder height with your palms forward.\", \"Raise the dumbbells upwards and pause at the contracted position.\", \"Lower the weights back to starting position.\"]\n},\n// {\n//     type: 'SHOULDERS',\n//     name: 'Arnold Press',\n//     apiName: \"Dumbbell Seated Arnold Press\",\n//     primaryMuscles: ['Anterior and Lateral Deltoids'],\n//     secondaryMuscles: ['Triceps'],\n//     suggestedRepRange: '10-15 reps',\n//     gifUrl: \"https://api.exercisedb.io/image/yj8v4s87LiY57Y\"\n// },\n{\n  type: 'SHOULDERS',\n  name: 'Dumbbell Lateral Raise',\n  gifName: \"dumbbell lateral raise\",\n  primaryMuscles: ['Lateral Deltoids'],\n  secondaryMuscles: ['Anterior and Posterior Deltoids'],\n  steps: [\"Stand up straight with dumbbells at either side, palms facing your hips.\", \"Raise your arms on either side with a slight bend in your elbow until they are parallel with the floor. Pause at the top of the motion.\", \"Slowly return your arms down to starting position.\"]\n}, {\n  type: 'SHOULDERS',\n  name: 'Dumbbell Front Raise',\n  gifName: \"dumbbell front raise\",\n  primaryMuscles: ['Anterior Deltoids'],\n  secondaryMuscles: ['Lateral Deltoids'],\n  steps: [\"Grab two dumbbells while standing upright with the dumbbells at your side.\", \"Raise the two dumbbells with your elbows being fully extended until the dumbbells are eye level.\", \"Lower the weights in a controlled manner to the starting position and repeat.\"]\n}\n// {\n//     type: 'SHOULDERS',\n//     name: 'Reverse Fly',\n//     apiName: \"Dumbbell Laying Reverse Fly\",\n//     primaryMuscles: ['Posterior Deltoids'],\n//     secondaryMuscles: ['Trapezius', 'Rhomboids'],\n//     suggestedRepRange: '10-15 reps',\n//     gifUrl: \"https://api.exercisedb.io/image/t6GtGbr8C87HgB\"\n// }\n];\n\nconst chestExercises = [{\n  type: 'CHEST',\n  name: 'Barbell Bench Press',\n  gifName: 'barbell bench press',\n  primaryMuscles: ['Pectoralis Major'],\n  secondaryMuscles: ['Triceps', 'Deltoids'],\n  steps: [\"Lay flat on the bench with your feet on the ground. With straight arms unrack the bar.\", \"Lower the bar to your mid chest\", \"Raise the bar until you've locked your elbows.\"]\n}, {\n  type: 'CHEST',\n  name: 'Push-Ups',\n  gifName: \"deep push up\",\n  primaryMuscles: ['Pectoralis Major'],\n  secondaryMuscles: ['Triceps', 'Deltoids'],\n  steps: [\"Place your hands firmly on the ground, directly under shoulders.\", \"Flatten your back so your entire body is straight and slowly lower your body\", \"Draw shoulder blades back and down, keeping elbows tucked close to your body\", \"Exhale as you push back to the starting position.\"]\n}, {\n  type: 'CHEST',\n  name: 'Dumbbell Fly',\n  gifName: \"dumbbell fly\",\n  primaryMuscles: ['Pectoralis Major'],\n  secondaryMuscles: ['Anterior Deltoids', 'Triceps'],\n  steps: [\"Lay flat on the bench and place your feet on the ground.\", \"Begin the exercise with the dumbbells held together above your chest, elbows slightly bent.\", \"Simultaneously lower the weights to either side.\", \"Pause when the weights are parallel to the bench, then raise your arms to the starting position.\"]\n},\n// {\n//     type: 'CHEST',\n//     name: 'Incline Bench Press',\n//     apiName: \"Barbell Incline Bench Press\",\n//     primaryMuscles: ['Upper Pectoralis Major'],\n//     secondaryMuscles: ['Anterior Deltoids', 'Triceps'],\n//     suggestedRepRange: '8-12 reps',\n//     gifUrl: \"https://api.exercisedb.io/image/LEHuMI0sJlp8p7\"\n// },\n{\n  type: 'CHEST',\n  name: 'Cable Crossover',\n  gifName: 'cable standing fly',\n  primaryMuscles: ['Pectoralis Major'],\n  secondaryMuscles: ['Anterior Deltoids', 'Triceps'],\n  steps: [\"Use a handle attachment set all the way to the bottom of the machine.\", \"Bring both of the handles to your chest and make sure you are in the center of the cable crossover.\", \"Walk a few steps forward.\", \"Then press the weight forward. From there, your shoulders should horizontally abduct and adduct while your elbows stay in a fixed position.\"]\n}];\nconst bicepExercises = [{\n  type: 'UPPER ARMS',\n  name: 'Barbell Curl',\n  gifName: \"barbell curl\",\n  primaryMuscles: ['Biceps Brachii'],\n  secondaryMuscles: ['Brachialis', 'Brachioradialis'],\n  steps: [\"While holding the upper arms stationary, curl the weights forward while contracting the biceps as you breathe out.\", \"Continue the movement until your biceps are fully contracted and the bar is at shoulder level.\", \"Hold the contracted position for a second and squeeze the biceps hard.\", \"Slowly bring the weight back down to the starting position.\"]\n}, {\n  type: 'UPPER ARMS',\n  name: 'Dumbbell Curl',\n  gifName: \"dumbbell alternate biceps curl\",\n  primaryMuscles: ['Biceps Brachii'],\n  secondaryMuscles: ['Brachialis', 'Brachioradialis'],\n  steps: [\"Stand up straight with a dumbbell in each hand at arm's length.\", \"Raise one dumbbell and twist your forearm until it is vertical and your palm faces the shoulder.\", \"Lower to original position and repeat with opposite arm.\"]\n}, {\n  type: 'UPPER ARMS',\n  name: 'Preacher Curl',\n  gifName: \"dumbbell alternate preacher curl\",\n  primaryMuscles: ['Biceps Brachii'],\n  secondaryMuscles: ['Brachialis', 'Brachioradialis'],\n  steps: [\"Start with a with a dumbbell in one hand and your elbow resting on the bench.\", \"From this starting position, curl the dumbbell up towards your shoulder, keeping your upper arm stationary on the bench.\"]\n}];\nconst tricepExercises = [{\n  type: 'UPPER ARMS',\n  name: 'Cable Push Down',\n  gifName: \"cable pushdown\",\n  primaryMuscles: ['Triceps Brachii'],\n  secondaryMuscles: ['Anconeus'],\n  steps: [\"You can use any attachment for this. The cable should be set all the way at the top of the machine.\", \"Make sure to keep your upper arm glued at your side. Extend your elbows until you feel your triceps contract.\"]\n}, {\n  type: 'UPPER ARMS',\n  name: 'Skull Crusher',\n  gifName: \"barbell lying triceps extension skull crusher\",\n  primaryMuscles: ['Triceps Brachii'],\n  secondaryMuscles: ['Anconeus', 'Deltoids'],\n  steps: [\"Take a shoulder width grip. Break at the elbows. Try to keep your elbows tucked in. Don't let them flare out.\", \"Stop the bar a few inches from your forehead and extend your elbows back up.\"]\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/data.js\n");

/***/ }),

/***/ "./src/scripts/exercises.js":
/*!**********************************!*\
  !*** ./src/scripts/exercises.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"displayExerciseInfo\": function() { return /* binding */ displayExerciseInfo; },\n/* harmony export */   \"generateExercise\": function() { return /* binding */ generateExercise; },\n/* harmony export */   \"removeExerciseFromInfoContainer\": function() { return /* binding */ removeExerciseFromInfoContainer; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"./src/scripts/data.js\");\n\nconst exercises = {\n  'chest': _data_js__WEBPACK_IMPORTED_MODULE_0__.chestExercises,\n  'left-shoulder': _data_js__WEBPACK_IMPORTED_MODULE_0__.shoulderExercises,\n  'right-shoulder': _data_js__WEBPACK_IMPORTED_MODULE_0__.shoulderExercises,\n  'left-bicep': _data_js__WEBPACK_IMPORTED_MODULE_0__.bicepExercises,\n  'right-bicep': _data_js__WEBPACK_IMPORTED_MODULE_0__.bicepExercises,\n  'left-tricep': _data_js__WEBPACK_IMPORTED_MODULE_0__.tricepExercises,\n  'right-tricep': _data_js__WEBPACK_IMPORTED_MODULE_0__.tricepExercises\n};\nconst generateExercise = async (muscleBlock, carouselInstance) => {\n  const exercisesByMuscleBlock = exercises[muscleBlock.classList[0]]; // Get exercises for the muscle block class\n  debugger;\n  // keep assigning an exercise until it's NOT in storedExercises\n  let exercise;\n  do {\n    const randomIndex = Math.floor(Math.random() * exercisesByMuscleBlock.length);\n    exercise = exercisesByMuscleBlock[randomIndex];\n  } while (carouselInstance.storedExercises.includes(exercise));\n\n  // check if anything exists on the R side\n  const instructionsContainer = document.querySelector('.instructions-container');\n  while (instructionsContainer.firstChild) {\n    instructionsContainer.removeChild(instructionsContainer.firstChild);\n  }\n  ;\n  const exerciseInfoContainer = document.querySelector('.exercise-info-container');\n  while (exerciseInfoContainer.firstChild) {\n    exerciseInfoContainer.removeChild(exerciseInfoContainer.firstChild);\n  }\n  ;\n  const gifContainer = document.querySelector('.gif-container');\n  if (gifContainer.firstChild) {\n    gifContainer.removeChild(gifContainer.firstChild);\n  }\n  ;\n\n  // Create/append loading spinner or text\n  const loadingIndicator = document.createElement('div');\n  loadingIndicator.classList.add('gif');\n  loadingIndicator.innerText = \"Fetching gif...\"; // You can use a CSS spinner or a loading image instead of text\n  gifContainer.appendChild(loadingIndicator);\n  const exerciseTitleContainer = document.querySelector('.exercise-title-container');\n  if (exerciseTitleContainer.firstChild) {\n    exerciseTitleContainer.removeChild(exerciseTitleContainer.firstChild);\n  }\n\n  // create/append exerciseInfo\n  const primaryMusclesTitle = document.createElement('div');\n  primaryMusclesTitle.classList.add('primary-muscles-title');\n  primaryMusclesTitle.innerText = 'Primary Muscles';\n  const primaryMuscles = document.createElement('div');\n  primaryMuscles.classList.add('primary-muscles');\n  primaryMuscles.innerText = `${exercise.primaryMuscles.join(\" \")}`;\n  const secondaryMusclesTitle = document.createElement('div');\n  secondaryMusclesTitle.classList.add('secondary-muscles-title');\n  secondaryMusclesTitle.innerText = 'Secondary Muscles';\n  const secondaryMuscles = document.createElement('div');\n  secondaryMuscles.classList.add('secondary-muscles');\n  secondaryMuscles.innerText = `${exercise.secondaryMuscles.join(\", \")}`;\n  const strengthButton = document.createElement('button');\n  strengthButton.classList.add('goal-button');\n  strengthButton.innerText = 'Strength';\n  strengthButton.dataset.goal = 'strength';\n  const sizeButton = document.createElement('button');\n  sizeButton.classList.add('goal-button');\n  sizeButton.innerText = 'Size';\n  sizeButton.dataset.goal = 'size';\n  const enduranceButton = document.createElement('button');\n  enduranceButton.classList.add('goal-button');\n  enduranceButton.innerText = 'Endurance';\n  enduranceButton.dataset.goal = 'endurance';\n  strengthButton.addEventListener('click', () => {\n    debugger;\n    toggleActiveButton(strengthButton);\n    displayRecommendedRepRange('strength');\n    exercise.goal = 'strength';\n    // exercise.repRange = '4-6 reps';\n    carouselInstance.updateStoredExercise(exercise);\n  });\n  sizeButton.addEventListener('click', () => {\n    toggleActiveButton(sizeButton);\n    displayRecommendedRepRange('size');\n    exercise.goal = 'size';\n    // exercise.repRange = '8-12 reps';\n    carouselInstance.updateStoredExercise(exercise);\n  });\n  enduranceButton.addEventListener('click', () => {\n    debugger;\n    toggleActiveButton(enduranceButton);\n    displayRecommendedRepRange('endurance');\n    exercise.goal = 'endurance';\n    // exercise.repRange = '15-20 reps';\n    carouselInstance.updateStoredExercise(exercise);\n  });\n  const buttonsContainer = document.createElement('div');\n  buttonsContainer.classList.add('goal-buttons-container');\n  buttonsContainer.append(strengthButton, sizeButton, enduranceButton);\n  const exerciseInfo = document.createElement('div');\n  exerciseInfo.classList.add('exercise-info');\n  exerciseInfo.append(primaryMusclesTitle, primaryMuscles, secondaryMusclesTitle, secondaryMuscles, buttonsContainer);\n  exerciseInfoContainer.appendChild(exerciseInfo);\n\n  // create/append gif\n  const gif = document.createElement('img');\n  gif.classList.add('gif');\n  gif.alt = exercise.name;\n  const gifImage = await fetchGif(exercise.gifName);\n  gif.src = gifImage;\n  loadingIndicator.remove();\n  gifContainer.appendChild(gif);\n  exercise.gifUrl = gifImage;\n\n  // create/append instructions\n  // const steps = await fetchSteps(exercise.apiName);\n  // exercise.steps = steps;\n  const exerciseSteps = document.createElement('ul');\n  exerciseSteps.classList.add('exercise-steps');\n  exercise.steps.forEach(step => {\n    const exerciseStep = document.createElement('li');\n    exerciseStep.classList.add('exercise-step');\n    exerciseStep.innerText = `  ${step}`;\n    exerciseSteps.appendChild(exerciseStep);\n  });\n\n  // exerciseTitle.style.display = 'flex';\n  const exerciseTitle = document.createElement('div');\n  exerciseTitle.classList.add('exercise-title');\n  exerciseTitle.innerText = exercise.name;\n  exerciseTitleContainer.append(exerciseTitle);\n  const instructionsExerciseTitle = document.createElement('div');\n  instructionsExerciseTitle.classList.add('instructions-exercise-title');\n  instructionsExerciseTitle.innerText = 'Instructions';\n  instructionsContainer.appendChild(instructionsExerciseTitle);\n  instructionsContainer.appendChild(exerciseSteps);\n  carouselInstance.addExerciseToCarousel(exercise);\n};\nconst displayRecommendedRepRange = workoutType => {\n  let repRangeContainer = document.querySelector('.rep-range');\n  if (!repRangeContainer) {\n    repRangeContainer = document.createElement('div');\n    repRangeContainer.classList.add('rep-range');\n\n    // Append the rep range container to the exercise info container\n    const exerciseInfo = document.querySelector('.exercise-info');\n    exerciseInfo.appendChild(repRangeContainer);\n  } else {\n    repRangeContainer.innerText = ''; // Clear the existing inner text\n  }\n\n  let repRange;\n  if (workoutType === 'strength') {\n    repRange = '4-6 reps';\n  } else if (workoutType === 'size') {\n    repRange = '8-12 reps';\n  } else if (workoutType === 'endurance') {\n    repRange = '15-20 reps';\n  }\n  repRangeContainer.innerText = repRange;\n};\nconst toggleActiveButton = clickedButton => {\n  const buttons = Array.from(document.querySelectorAll('.goal-button'));\n  buttons.forEach(button => {\n    if (button === clickedButton) {\n      button.classList.add('active');\n    } else {\n      button.classList.remove('active');\n    }\n  });\n};\nconst removeExerciseFromInfoContainer = nextExercise => {\n  if (nextExercise) displayExerciseInfo(nextExercise);else {\n    const exerciseTitle = document.querySelector('.exercise-title');\n    exerciseTitle.innerText = \"\";\n    exerciseTitle.style.display = 'none';\n    const instructionsContainer = document.querySelector('.instructions-container');\n    while (instructionsContainer.firstChild) {\n      instructionsContainer.removeChild(instructionsContainer.firstChild);\n    }\n    ;\n    const exerciseInfoContainer = document.querySelector('.exercise-info-container');\n    while (exerciseInfoContainer.firstChild) {\n      exerciseInfoContainer.removeChild(exerciseInfoContainer.firstChild);\n    }\n    ;\n    const gifContainer = document.querySelector('.gif-container');\n    if (gifContainer.firstChild) {\n      gifContainer.removeChild(gifContainer.firstChild);\n    }\n    ;\n  }\n};\nconst displayExerciseInfo = exercise => {\n  // change exercise name and remove appendages\n\n  const exerciseTitle = document.querySelector('.exercise-title');\n  exerciseTitle.innerText = exercise.name;\n  const instructionsContainer = document.querySelector('.instructions-container');\n  // while (instructionsContainer.secondChild) {\n  instructionsContainer.removeChild(instructionsContainer.children[1]);\n  // };\n  const exerciseSteps = document.createElement('ul');\n  exerciseSteps.classList.add('exercise-steps');\n  exercise.steps.forEach(step => {\n    const exerciseStep = document.createElement('li');\n    exerciseStep.classList.add('exercise-step');\n    exerciseStep.innerText = step;\n    exerciseSteps.appendChild(exerciseStep);\n  });\n  instructionsContainer.appendChild(exerciseSteps);\n  const primaryMuscles = document.querySelector('.primary-muscles');\n  primaryMuscles.innerText = `${exercise.primaryMuscles.join(\" \")}`;\n  const secondaryMuscles = document.querySelector('.secondary-muscles');\n  secondaryMuscles.innerText = `${exercise.secondaryMuscles.join(\" \")}`;\n  const gifContainer = document.querySelector('.gif-container');\n  if (gifContainer.firstChild) {\n    gifContainer.removeChild(gifContainer.firstChild);\n  }\n  ;\n  const goalButtons = document.querySelectorAll('.goal-button');\n  goalButtons.forEach(button => button.classList.remove('active'));\n  const button = document.querySelector(`.goal-button[data-goal=\"${exercise.goal}\"]`);\n  if (button) {\n    button.classList.add('active');\n    displayRecommendedRepRange(exercise.goal);\n  } else {\n    const repRangeElement = document.querySelector('.rep-range');\n    if (repRangeElement) {\n      repRangeElement.innerText = '';\n    }\n  }\n  const gif = document.createElement('img');\n  gif.classList.add('gif');\n  gif.src = exercise.gifUrl;\n  gif.alt = exercise.name;\n  gifContainer.appendChild(gif);\n};\n\n// const fetchSteps = async (exerciseName) => {\n//     const encodedName = encodeURIComponent(exerciseName);\n//     const url = `https://musclewiki.p.rapidapi.com/exercises?name=${encodedName}`;\n//     const options = {\n//         method: 'GET',\n//         headers: {\n//             'X-RapidAPI-Key': '3af8ef8f2dmshc6efeb993784441p1a7439jsn93b2667827e7',\n//             'X-RapidAPI-Host': 'musclewiki.p.rapidapi.com'\n//         }\n//     };\n//     try {\n//         const response = await fetch(url, options);\n//         const result = await response.json();\n//         const exercise = result[0];\n//         return exercise.steps;\n//     } catch (error) {\n//         console.error(error);\n//         return null;\n//     }\n// };\n\nconst fetchGif = async exerciseName => {\n  debugger;\n  const encodedName = encodeURIComponent(exerciseName);\n  const url = `https://exercisedb.p.rapidapi.com/exercises/name/${encodedName}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '3af8ef8f2dmshc6efeb993784441p1a7439jsn93b2667827e7',\n      'X-RapidAPI-Host': 'exercisedb.p.rapidapi.com'\n    }\n  };\n  debugger;\n  try {\n    const response = await fetch(url, options);\n    const result = await response.json();\n    const gifUrl = result[0].gifUrl;\n    return gifUrl;\n  } catch (error) {\n    console.error(error);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/exercises.js\n");

/***/ }),

/***/ "./src/scripts/muscleMap.js":
/*!**********************************!*\
  !*** ./src/scripts/muscleMap.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _exercises_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exercises.js */ \"./src/scripts/exercises.js\");\n\nclass MuscleMap {\n  constructor(containerEl, myCarousel) {\n    this.container = containerEl;\n    this.myCarousel = myCarousel;\n    this.render();\n    this.renderBack();\n    this.renderToggleButton();\n    this.handleClickGenerateExercise = this.handleClickGenerateExercise.bind(this);\n    this.bindEvents();\n    this.onCooldown = false;\n  }\n  render() {\n    const muscleMap = document.createElement('div');\n    muscleMap.classList.add('muscle-map');\n    const head = document.createElement('div');\n    head.classList.add('head');\n    const chest = document.createElement('div');\n    chest.classList.add('chest');\n    const leftChest = document.createElement('div');\n    leftChest.classList.add('left-chest');\n    chest.appendChild(leftChest);\n    const rightChest = document.createElement('div');\n    rightChest.classList.add('right-chest');\n    chest.appendChild(rightChest);\n    const back = document.createElement('div');\n    back.classList.add('back');\n    const leftShoulder = document.createElement('div');\n    leftShoulder.classList.add('left-shoulder');\n    const leftBicep = document.createElement('div');\n    leftBicep.classList.add('left-bicep');\n    const leftForearm = document.createElement('div');\n    leftForearm.classList.add('left-forearm');\n    const leftHand = document.createElement('div');\n    leftHand.classList.add('left-hand');\n    const rightShoulder = document.createElement('div');\n    rightShoulder.classList.add('right-shoulder');\n    const rightBicep = document.createElement('div');\n    rightBicep.classList.add('right-bicep');\n    const rightForearm = document.createElement('div');\n    rightForearm.classList.add('right-forearm');\n    const rightHand = document.createElement('div');\n    rightHand.classList.add('right-hand');\n    const absContainer = document.createElement('div');\n    absContainer.classList.add('abs');\n    for (let i = 0; i < 6; i++) {\n      const abs = document.createElement('div');\n      absContainer.appendChild(abs);\n    }\n    ;\n    const leftGlute = document.createElement('div');\n    leftGlute.classList.add('left-glute');\n    const leftQuad = document.createElement('div');\n    leftQuad.classList.add('left-quad');\n    const leftCalf = document.createElement('div');\n    leftCalf.classList.add('left-calf');\n    const leftFoot = document.createElement('div');\n    leftFoot.classList.add('left-foot');\n    const rightGlute = document.createElement('div');\n    rightGlute.classList.add('right-glute');\n    const rightQuad = document.createElement('div');\n    rightQuad.classList.add('right-quad');\n    const rightCalf = document.createElement('div');\n    rightCalf.classList.add('right-calf');\n    const rightFoot = document.createElement('div');\n    rightFoot.classList.add('right-foot');\n    muscleMap.appendChild(head);\n    muscleMap.appendChild(chest);\n    muscleMap.appendChild(back);\n    muscleMap.appendChild(leftShoulder);\n    muscleMap.appendChild(leftBicep);\n    muscleMap.appendChild(leftForearm);\n    muscleMap.appendChild(leftHand);\n    muscleMap.appendChild(rightShoulder);\n    muscleMap.appendChild(rightForearm);\n    muscleMap.appendChild(rightBicep);\n    muscleMap.appendChild(rightHand);\n    muscleMap.appendChild(absContainer);\n    muscleMap.appendChild(leftGlute);\n    muscleMap.appendChild(leftQuad);\n    muscleMap.appendChild(leftCalf);\n    muscleMap.appendChild(leftFoot);\n    muscleMap.appendChild(rightGlute);\n    muscleMap.appendChild(rightQuad);\n    muscleMap.appendChild(rightCalf);\n    muscleMap.appendChild(rightFoot);\n    this.container.appendChild(muscleMap);\n  }\n  renderBack() {\n    const muscleMapBack = document.createElement('div');\n    muscleMapBack.classList.add('muscle-map-back');\n    const head2 = document.createElement('div');\n    head2.classList.add('head-2');\n    const back2 = document.createElement('div');\n    back2.classList.add('back-2');\n    const leftShoulder = document.createElement('div');\n    leftShoulder.classList.add('left-shoulder');\n    const leftTricep = document.createElement('div');\n    leftTricep.classList.add('left-tricep');\n    const leftForearm = document.createElement('div');\n    leftForearm.classList.add('left-forearm');\n    const leftHand = document.createElement('div');\n    leftHand.classList.add('left-hand');\n    const rightShoulder = document.createElement('div');\n    rightShoulder.classList.add('right-shoulder');\n    const rightTricep = document.createElement('div');\n    rightTricep.classList.add('right-tricep');\n    const rightForearm = document.createElement('div');\n    rightForearm.classList.add('right-forearm');\n    const rightHand = document.createElement('div');\n    rightHand.classList.add('right-hand');\n    const leftGlute2 = document.createElement('div');\n    leftGlute2.classList.add('left-glute-2');\n    const rightGlute2 = document.createElement('div');\n    rightGlute2.classList.add('right-glute-2');\n    const leftHamstring = document.createElement('div');\n    leftHamstring.classList.add('left-hamstring');\n    const leftCalf = document.createElement('div');\n    leftCalf.classList.add('left-calf');\n    const leftFoot = document.createElement('div');\n    leftFoot.classList.add('left-foot');\n    const rightHamstring = document.createElement('div');\n    rightHamstring.classList.add('right-hamstring');\n    const rightCalf = document.createElement('div');\n    rightCalf.classList.add('right-calf');\n    const rightFoot = document.createElement('div');\n    rightFoot.classList.add('right-foot');\n    muscleMapBack.appendChild(head2);\n    muscleMapBack.appendChild(back2);\n    muscleMapBack.appendChild(leftShoulder);\n    muscleMapBack.appendChild(leftTricep);\n    muscleMapBack.appendChild(leftForearm);\n    muscleMapBack.appendChild(leftHand);\n    muscleMapBack.appendChild(rightShoulder);\n    muscleMapBack.appendChild(rightForearm);\n    muscleMapBack.appendChild(rightTricep);\n    muscleMapBack.appendChild(rightHand);\n    muscleMapBack.appendChild(leftGlute2);\n    muscleMapBack.appendChild(leftHamstring);\n    muscleMapBack.appendChild(leftCalf);\n    muscleMapBack.appendChild(leftFoot);\n    muscleMapBack.appendChild(rightGlute2);\n    muscleMapBack.appendChild(rightHamstring);\n    muscleMapBack.appendChild(rightCalf);\n    muscleMapBack.appendChild(rightFoot);\n    this.container.appendChild(muscleMapBack);\n  }\n  toggleView() {\n    const frontView = this.container.querySelector('.muscle-map');\n    const backView = this.container.querySelector('.muscle-map-back');\n    if (frontView.style.display !== 'none') {\n      frontView.style.display = 'none';\n      backView.style.display = 'grid';\n    } else {\n      frontView.style.display = 'grid';\n      backView.style.display = 'none';\n    }\n  }\n  bindEvents() {\n    this.addEventListeners();\n    const toggleButton = document.getElementById('toggle-view');\n    toggleButton.addEventListener('click', this.toggleView.bind(this));\n  }\n  renderToggleButton() {\n    const toggleButton = document.createElement('button');\n    toggleButton.id = 'toggle-view';\n    toggleButton.innerText = \"FLIP\";\n    this.container.appendChild(toggleButton);\n  }\n  addEventListeners() {\n    const muscleBlocks = Array.from(document.querySelectorAll('.muscle-map div:not(.abs, .abs div, .chest, .left-chest, .right-chest)'));\n    muscleBlocks.forEach(muscleBlock => {\n      muscleBlock.addEventListener('click', () => {\n        this.handleClickGenerateExercise(muscleBlock);\n        this.addAnimation(muscleBlock);\n      });\n    });\n    const chest = document.querySelector('.chest');\n    chest.addEventListener('click', () => {\n      this.handleClickGenerateExercise(chest);\n      const leftChest = chest.querySelector('.left-chest');\n      const rightChest = chest.querySelector('.right-chest');\n      this.addAnimation(leftChest);\n      this.addAnimation(rightChest);\n    });\n  }\n  addAnimation(element) {\n    element.classList.add('animate');\n    element.addEventListener('animationend', () => {\n      element.classList.remove('animate');\n    });\n  }\n  handleClickGenerateExercise(muscleBlock) {\n    if (this.onCooldown) {\n      return;\n    }\n    if (this.myCarousel.storedExercises.length < 4) {\n      (0,_exercises_js__WEBPACK_IMPORTED_MODULE_0__.generateExercise)(muscleBlock, this.myCarousel);\n      this.startCooldown();\n    } else {\n      muscleBlock.removeEventListener('click', () => {});\n    }\n  }\n  startCooldown() {\n    this.onCooldown = true;\n    setTimeout(() => {\n      this.onCooldown = false;\n    }, 2000);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MuscleMap);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/muscleMap.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWZpdG5lc3NidWRkeS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;